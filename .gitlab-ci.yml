include:
  - '.cicd/kaniko.yml'
  - '.cicd/go-build.yml'
  - '.cicd/go-test-abstract.yml'
  - '.cicd/go-test.yml'
  - '.cicd/go-scheduled-test.yml'

stages:
  - prep
  - build
  - test
  - deploy

variables:
  CI_OCI_REGISTRY: "public.ecr.aws/nolus"
  AWS_REGISTRY_ID: "013603813222"
  AWS_DEV_INSTANCE_ID: "i-0307d4bb453d880f3"
  ARTIFACT_BUCKET: "nolus-artifact-bucket"
  # https://github.com/GoogleContainerTools/kaniko/issues/1542#issuecomment-853929795
  container: "docker"
  ARTIFACT_BIN: "nolus.tar.gz"

  NOLUS_BUILDER_REPO: "builder"
  NOLUS_BUILDER_TAG: "0.4"
  NOLUS_BUILDER_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_BUILDER_REPO}:${NOLUS_BUILDER_TAG}"

  NOLUS_NODE_REPO: "node"
  NOLUS_NODE_TAG: "${CI_COMMIT_TAG}"
  NOLUS_NODE_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_NODE_REPO}:${NOLUS_NODE_TAG}"

  NOLUS_INTEGRATION_REPO: "integration"
  NOLUS_INTEGRATION_TAG: "0.12"
  NOLUS_INTEGRATION_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_INTEGRATION_REPO}:${NOLUS_INTEGRATION_TAG}"

prep-builder:check-exist:
  stage: prep
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - if aws ecr-public describe-images --registry-id $AWS_REGISTRY_ID
          --repository-name $NOLUS_BUILDER_REPO --region us-east-1
          --image-ids=imageTag=$NOLUS_BUILDER_TAG ;
      then 
        echo "NOLUS_BUILDER_EXISTS=true" >> builder_exists.env ;
      fi
    - if aws ecr-public describe-images --registry-id $AWS_REGISTRY_ID
          --repository-name $NOLUS_INTEGRATION_REPO --region us-east-1
          --image-ids=imageTag=$NOLUS_INTEGRATION_TAG ;
      then
        echo "NOLUS_INTEGRATION_EXISTS=true" >> builder_exists.env ;
      fi
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
  artifacts:
    reports:
      dotenv: builder_exists.env

# Builds a builder image only if a new NOLUS_BUILDER_TAG is pushed
# ref: https://github.com/GoogleContainerTools/kaniko
prep-builder:
  stage: prep
  needs: ["prep-builder:check-exist"]
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/builder_spec
    KANIKO_IMAGE: ${NOLUS_BUILDER_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_BUILDER_EXISTS}

# Builds the binary
build-binary:
  stage: build
  extends:
    - .go-build
  script:
    - make build
    - tar -C target/release/ -czvf $ARTIFACT_BIN .
  artifacts:
    name: "nolusd-$CI_COMMIT_REF_SLUG"
    paths:
      - $ARTIFACT_BIN

# Builds a new node image on a new git tag only
build-image:
  stage: build
  needs: ["build-binary"]
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/node_spec
    KANIKO_IMAGE: ${NOLUS_NODE_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_NODE_EXISTS}
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

build-integration:
  stage: build
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/integration_spec
    KANIKO_IMAGE: ${NOLUS_INTEGRATION_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_INTEGRATION_EXISTS}

    # - echo "CI_COMMIT_TAG = $CI_COMMIT_TAG"
    # - echo "CI_COMMIT_REF_SLUG = $CI_COMMIT_REF_SLUG"
    # - echo "CI_COMMIT_REF_NAME = $CI_COMMIT_REF_NAME"

# test-unit:
#   extends: .go-test
#   script:
#     - make test-unit

test-fuzzer:on-schedule:
  extends: .go-scheduled-test
  script:
    - make fuzz

test-unit-cosmos:on-schedule:
  extends: .go-scheduled-test
  script:
    - make test-unit-cosmos

test-integration:
  stage: test
  needs: ["build-binary"]
  image: "${NOLUS_INTEGRATION_IMAGE}"
  script:
    - tar -xvf $ARTIFACT_BIN
    - export PATH="$(pwd)":$PATH
    - make test-integration

# setup-dev-network:
#   stage: deploy
#   needs: [ "build-binary", "publish-remote-scripts"]
#   image:
#     name: amazon/aws-cli
#     entrypoint: [ "" ]
#   script:
#     -  ./scripts/init-dev-network.sh --validators_dir validators -v 3 --validator_accounts_dir val_accounts
#           --suspend-admin 'nolusalabala' --faucet-mnemonic '$FAUCET_MNEMONIC_DEV'
#           --faucet-tokens '$FAUCET_TOKENS_DEV'
#   only:
#     - main

# copy-binary-scripts-s3:
#   stage: deploy
#   needs: [ "build-binary" ]
#   image:
#     name: amazon/aws-cli
#     entrypoint: [ "" ]
#   script:
#     - aws --version
#     - yum install -y tar gzip
#     - tar -czvf scripts.tar.gz scripts/
#     - aws configure set region $AWS_DEFAULT_REGION
#     - aws s3 sync target/release s3://$ARTIFACT_BUCKET/binaries
#     - aws s3 cp scripts.tar.gz s3://$ARTIFACT_BUCKET/scripts.tar.gz
#   only:
#     - main

# deploy-from-s3:
#   stage: deploy
#   image:
#     name: amazon/aws-cli
#     entrypoint: [ "" ]
#   script:
#     - aws --version
#     - yum install jq -y
#     - ./scripts/aws/run-shell-script.sh "aws s3 cp s3://nolus-artifact-bucket/binaries/nolusd /usr/bin/ && chmod +x /usr/bin/nolusd" "$AWS_DEV_INSTANCE_ID"
#     - ./scripts/aws/run-shell-script.sh "aws s3 cp s3://nolus-artifact-bucket/scripts.tar.gz /opt/deploy/" "$AWS_DEV_INSTANCE_ID"
#     - ./scripts/aws/run-shell-script.sh "tar -xvf /opt/deploy/scripts.tar.gz -C /opt/deploy/" "$AWS_DEV_INSTANCE_ID"
#   dependencies:
#     - copy-binary-scripts-s3
#   only:
#     - main

# execute-dev-scripts:
#   stage: deploy
#   image:
#     name: amazon/aws-cli
#     entrypoint: [ "" ]
#   script:
#     - aws --version
#     - yum install jq -y
#     - ./scripts/aws/run-shell-script.sh "systemctl stop nolusd-dev-validator-1.service && systemctl stop nolusd-dev-validator-2.service && systemctl stop nolusd-dev-validator-3.service" "$AWS_DEV_INSTANCE_ID"
#     - cmd_main="export HOME=/home/ssm-user && /bin/bash /opt/deploy/scripts/init-dev-network.sh --validators_dir validators -v 3 --validator_accounts_dir val_accounts --suspend-admin 'nolusalabala' --faucet-mnemonic '$FAUCET_MNEMONIC_DEV' --faucet-tokens '$FAUCET_TOKENS_DEV' "
#     - ./scripts/aws/run-shell-script.sh "$cmd_main" "$AWS_DEV_INSTANCE_ID"
#     - ./scripts/aws/run-shell-script.sh "systemctl restart nolusd-dev-validator-1.service && systemctl restart nolusd-dev-validator-2.service && systemctl restart nolusd-dev-validator-3.service" "$AWS_DEV_INSTANCE_ID"

#   dependencies:
#     - deploy-from-s3
#   only:
#     - main