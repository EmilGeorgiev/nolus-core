include:
  - '.cicd/kaniko.yml'
  - '.cicd/go-build.yml'
  - '.cicd/go-test-abstract.yml'
  - '.cicd/go-test.yml'
  - '.cicd/go-scheduled-test.yml'

stages:
  - prep
  - build
  - test
  - deploy

variables:
  CI_OCI_REGISTRY: "public.ecr.aws/nolus"
  AWS_REGISTRY_ID: "013603813222"
  AWS_DEV_INSTANCE_ID: "i-0307d4bb453d880f3"
  ARTIFACT_BUCKET: "nolus-artifact-bucket"
# https://github.com/GoogleContainerTools/kaniko/issues/1542#issuecomment-853929795
  container: "docker"

  NOLUS_BUILDER_REPO: "builder"
  NOLUS_BUILDER_TAG: "0.2"
  NOLUS_BUILDER_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_BUILDER_REPO}:${NOLUS_BUILDER_TAG}"

  NOLUS_NODE_REPO: "node"
  NOLUS_NODE_TAG: "latest"
  NOLUS_NODE_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_NODE_REPO}:${NOLUS_NODE_TAG}"

  NOLUS_NODE_PROD_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_NODE_REPO}:${PROD_VERSION}"

  NOLUS_INTEGRATION_REPO: "integration"
  NOLUS_INTEGRATION_TAG: "0.11"
  NOLUS_INTEGRATION_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_INTEGRATION_REPO}:${NOLUS_INTEGRATION_TAG}"

prep-builder:check-exist:
  stage: prep
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - if aws ecr-public describe-images --registry-id $AWS_REGISTRY_ID 
          --repository-name $NOLUS_BUILDER_REPO --region us-east-1 
          --image-ids=imageTag=$NOLUS_BUILDER_TAG ; 
      then
        echo "NOLUS_BUILDER_EXISTS=true" >> builder_exists.env ;
      fi
  artifacts:
    reports:
      dotenv: builder_exists.env

#ref: https://github.com/GoogleContainerTools/kaniko
prep-builder:
  stage: prep
  needs: ["prep-builder:check-exist"]
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/builder_spec
    KANIKO_IMAGE: ${NOLUS_BUILDER_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_BUILDER_EXISTS}

download-wasmvm-lib:
  stage: build
  image: "${NOLUS_BUILDER_IMAGE}"
  extends: .wasmvm-cache-vars
  cache:
    key: $WASMVM_CACHE_KEY
    paths:
      - $WASMVM_REL_DIR
  variables:
    WASMVM_LIB: "libwasmvm_muslc.a"
    WASMVM_BASE_URL: "https://github.com/CosmWasm/wasmvm/releases/download/$WASMVM_VERSION"
    WASMVM_URL: "$WASMVM_BASE_URL/$WASMVM_LIB"
    WASMVM_LOCAL_PATH: $WASMVM_DIR/$WASMVM_LIB
    WASMVM_CHECKSUM_URL: "$WASMVM_BASE_URL/checksums.txt"
  before_script:
    - mkdir -p $WASMVM_DIR
  script:
   - wasmvm_lib_checksum=$(wget -O - "$WASMVM_CHECKSUM_URL")
   - if [ ! -f "$WASMVM_LOCAL_PATH" ] ||
        ! ( echo "$(sha256sum "$WASMVM_LOCAL_PATH")" | grep "$wasmvm_lib_checksum" - );
     then
        wget -O $WASMVM_LOCAL_PATH $WASMVM_URL;
     fi

build-binary:
  stage: build
  extends:
    - .go-build
  script:
    - - if [[ "$PROD_BUILD" = "true" ]]; then export VERSION="$PROD_VERSION" && make build; else make build; fi
  artifacts:
    paths:
      - target/release


tag-prod-branch:
  stage: build
  script:
    - git tag -a "$PROD_VERSION" -m "Version created by gitlab-ci Build"
    - git push --tags
  rules:
    - if:  $PROD_BUILD == "true"
      when: on_success

build-image:
  stage: build
  needs: ["build-binary"]
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/node_spec
    KANIKO_IMAGE: ${NOLUS_NODE_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_NODE_EXISTS}
  rules:
    - if:  $PROD_BUILD == "true"
      variables:
        KANIKO_IMAGE: ${NOLUS_NODE_PROD_IMAGE}

build-integration:
  stage: build
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/integration_spec
    KANIKO_IMAGE: ${NOLUS_INTEGRATION_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_INTEGRATION_EXISTS}

test-unit:
  extends: .go-test
  script:
    - make test-unit

test-fuzzer:on-schedule:
  extends: .go-scheduled-test
  script:
    - make fuzz

test-unit-cosmos:on-schedule:
  extends: .go-scheduled-test
  script:
    - make test-unit-cosmos

test-integration:
  stage: test
  needs: ["build-binary"]
  image: "${NOLUS_INTEGRATION_IMAGE}"
  script:
    - export PATH="$(pwd)/target/release:$PATH:$(pwd)/scripts"
    - make test-integration

copy-binary-scripts-s3:
  stage: deploy
  needs: [ "build-binary" ]
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  script:
    - aws --version
    - aws configure set region $AWS_DEFAULT_REGION
    - aws s3 sync target/release s3://$ARTIFACT_BUCKET/binaries
    - aws s3 sync scripts s3://$ARTIFACT_BUCKET/scripts
  only:
    - main




deploy-from-s3:
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  script:
    - aws --version
    - binaries=$(aws ssm send-command --document-name "AWS-RunShellScript" --document-version "1" --targets '[{"Key":"tag:Name","Values":["dev-network-worker"]}]' --parameters '{"workingDirectory":[""],"executionTimeout":["3600"],"commands":["aws s3 cp s3://$ARTIFACT_BUCKET/binaries/cosmzoned /usr/bin/ && chmod +x /usr/bin/cosmzoned"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region eu-west-1 --query 'Command.{CommandId:CommandId}' --output text )
    - aws ssm wait command-executed  --command-id "$binaries" --instance-id $AWS_DEV_INSTANCE_ID
    - "[[ $(aws ssm list-command-invocations --command-id \"$binaries\"  | jq '.CommandInvocations[].Status' | xargs ) == \"Failed\" ]];"
    - scripts=$(aws ssm send-command --document-name "AWS-RunShellScript" --document-version "1" --targets '[{"Key":"tag:Name","Values":["dev-network-worker"]}]' --parameters '{"workingDirectory":[""],"executionTimeout":["3600"],"commands":["aws s3 sync s3://$ARTIFACT_BUCKET/scripts/ /opt/deploy/scripts'"'"'"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region eu-west-1 --query 'Command.{CommandId:CommandId}' --output text )
    - aws ssm wait command-executed  --command-id "$scripts" --instance-id $AWS_DEV_INSTANCE_ID
    - "[[ $(aws ssm list-command-invocations --command-id \"$scripts\"  | jq '.CommandInvocations[].Status' | xargs ) == \"Failed\" ]];"
  only:
    - main



execute-dev-scripts:
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  script:
    - aws --version
    - script_status=$(aws ssm send-command --document-name "AWS-RunShellScript" --document-version "1" --targets '[{"Key":"tag:Name","Values":["dev-network-worker"]}]' --parameters '{"workingDirectory":[""],"executionTimeout":["3600"],"commands":["/opt/deploy/scripts/init-dev-network.sh -v 3 --output validators'"'"' && "," cosmzoned start --home /opt/deploy/scripts/validators/dev-validator-1/ &"," cosmzoned start --home /opt/deploy/scripts/validators/dev-validator-2/ &"," cosmzoned start --home /opt/deploy/scripts/validators/dev-validator-3/ & "]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region eu-west-1  --query 'Command.{CommandId:CommandId}' --output text )
    - aws ssm wait command-executed  --command-id "$script_status" --instance-id $AWS_DEV_INSTANCE_ID
    - "[[ $(aws ssm list-command-invocations --command-id \"$scripts_status\"  | jq '.CommandInvocations[].Status' | xargs ) == \"Failed\" ]];"
  only:
    - main