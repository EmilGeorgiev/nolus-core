include:
  - '.cicd/kaniko.yml'
  - '.cicd/go-build.yml'
  - '.cicd/go-test-abstract.yml'
  - '.cicd/go-test.yml'
  - '.cicd/go-scheduled-test.yml'

stages:
  - prep
  - build
  - test
  - deploy

variables:
  CI_OCI_REGISTRY: "public.ecr.aws/nolus"
  AWS_REGISTRY_ID: "013603813222"
  AWS_DEV_INSTANCE_ID: "i-0307d4bb453d880f3"
  ARTIFACT_BUCKET: "nolus-artifact-bucket"
  # https://github.com/GoogleContainerTools/kaniko/issues/1542#issuecomment-853929795
  container: "docker"
  ARTIFACT_BIN: "nolus.tar.gz"
  ARTIFACT_SCRIPTS: "scripts.tar.gz"

  IS_NOLUS_VERSION: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_TAG'

  NOLUS_BUILDER_REPO: "builder"
  NOLUS_BUILDER_TAG: "0.4"
  NOLUS_BUILDER_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_BUILDER_REPO}:${NOLUS_BUILDER_TAG}"

  NOLUS_NODE_REPO: "node"
  NOLUS_NODE_TAG: "${CI_COMMIT_TAG}"
  NOLUS_NODE_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_NODE_REPO}:${NOLUS_NODE_TAG}"

  NOLUS_INTEGRATION_REPO: "integration"
  NOLUS_INTEGRATION_TAG: "0.12"
  NOLUS_INTEGRATION_IMAGE: "${CI_OCI_REGISTRY}/${NOLUS_INTEGRATION_REPO}:${NOLUS_INTEGRATION_TAG}"

prep-builder:check-exist:
  stage: prep
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - if aws ecr-public describe-images --registry-id $AWS_REGISTRY_ID
          --repository-name $NOLUS_BUILDER_REPO --region us-east-1
          --image-ids=imageTag=$NOLUS_BUILDER_TAG ;
      then 
        echo "NOLUS_BUILDER_EXISTS=true" >> builder_exists.env ;
      fi
    - if aws ecr-public describe-images --registry-id $AWS_REGISTRY_ID
          --repository-name $NOLUS_INTEGRATION_REPO --region us-east-1
          --image-ids=imageTag=$NOLUS_INTEGRATION_TAG ;
      then
        echo "NOLUS_INTEGRATION_EXISTS=true" >> builder_exists.env ;
      fi
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
  artifacts:
    reports:
      dotenv: builder_exists.env

# Builds a builder image only if a new NOLUS_BUILDER_TAG is pushed to a protected git ref.
# Kaniko ref: https://github.com/GoogleContainerTools/kaniko
prep-builder:
  stage: prep
  needs: ["prep-builder:check-exist"]
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/builder_spec
    KANIKO_IMAGE: ${NOLUS_BUILDER_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_BUILDER_EXISTS}

# Builds the binary
build-binary:
  stage: build
  extends:
    - .go-build
  script:
    - make build
    - tar -C target/release/ -czvf $ARTIFACT_BIN .
  artifacts:
    name: "nolusd-$CI_COMMIT_REF_SLUG"
    paths:
      - $ARTIFACT_BIN

# Builds a new node image on a new version only.
# A version is denoted with a protected tag.
build-image:
  stage: build
  needs: ["prep-builder:check-exist","build-binary"]
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/node_spec
    KANIKO_IMAGE: ${NOLUS_NODE_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_NODE_EXISTS}
  rules:
    - if: $IS_NOLUS_VERSION
      when: on_success

# Builds an integration tests image only if a new NOLUS_INTEGRATION_TAG is pushed to a protected git ref.
build-integration:
  stage: build
  needs: ["prep-builder:check-exist"]
  extends: .kaniko
  variables:
    KANIKO_DOCKER_FILE: build/integration_spec
    KANIKO_IMAGE: ${NOLUS_INTEGRATION_IMAGE}
    KANIKO_IMAGE_EXISTS: ${NOLUS_INTEGRATION_EXISTS}

test-unit:
  extends: .go-test
  script:
    - make test-unit

test-fuzzer:on-schedule:
  extends: .go-scheduled-test
  script:
    - make fuzz

test-unit-cosmos:on-schedule:
  extends: .go-scheduled-test
  script:
    - make test-unit-cosmos

test-integration:
  stage: test
  needs: ["build-binary"]
  image: "${NOLUS_INTEGRATION_IMAGE}"
  script:
    - tar -xvf $ARTIFACT_BIN
    - export PATH="$(pwd)":$PATH
    - make test-integration

# Deploy a dev network when a new version is being built
prep-deploy:
  stage: deploy
  script:
    - tar -czvf $ARTIFACT_SCRIPTS scripts/remote scripts/common
  rules:
    - if: $IS_NOLUS_VERSION
      when: on_success
  artifacts:
    name: "scripts-$CI_COMMIT_REF_SLUG"
    paths:
      - $ARTIFACT_SCRIPTS

setup-dev-network:
  stage: deploy
  needs: ["build-binary", "prep-deploy"]
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  variables:
    ACCOUNTS_DIR: accounts
  script:
    - yum install -y tar gzip jq
    - tar -xvf $ARTIFACT_BIN
    - export PATH="$(pwd)":$PATH
    - ./scripts/init-dev-network.sh --artifact-bin $ARTIFACT_BIN --artifact-scripts $ARTIFACT_SCRIPTS
          --chain-id nolus-dev-1 -v 3 --validator_accounts_dir "$ACCOUNTS_DIR"
          --user-dir "$ACCOUNTS_DIR" --faucet-mnemonic "$FAUCET_MNEMONIC_DEV"
          --faucet-tokens "$FAUCET_TOKENS_DEV"
  artifacts:
    name: "accounts-$CI_COMMIT_REF_SLUG"
    paths:
      - $ACCOUNTS_DIR
